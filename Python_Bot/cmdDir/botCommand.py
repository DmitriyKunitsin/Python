import db.sqliteDb as db
from configs.UserProfile import UserProfile
from configs.userData import ASK_AGE
from configs.userData import ASK_WEIGHT
from configs.userData import ASK_HEIGHT
from configs.userData import ASK_GENDER
from configs.userData import ASK_CONST_STRING_END
from configs.userData import get_state_text

NAME_CONST_CURRENT_STATE_DIALOG = "current_state_dialog"

from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup
    )
from telegram.ext import (
    ContextTypes,
    ConversationHandler
)

Name_BOT_data = "UserProfile"

def build_button_menu(buttons, n_cols,header_buttons=None,footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append([footer_buttons])
    return menu

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = context.user_data[Name_BOT_data] = UserProfile.load_foarm(update.effective_user.id)
    if user is None:
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        user = context.user_data[Name_BOT_data] = UserProfile.init_user(new_user= update.effective_user)
        if user is None:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü§î. \n–°–æ–æ–±—â–∏—Ç–µ –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üíï")
            await help_command(update=update, context=context)
            return
    db.add_or_update_user(user)
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ–∏—Ç–Ω–µ—Å–∞.\n"
        "–Ø –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n"
        "- –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –ø–∏—Ç–∞–Ω–∏—é\n"
        "- –ü–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏\n"
        "- –ú–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏–ª–∏ –≤–æ–¥–µ\n"
        "- –î–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\n"
        "/help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    )
    try:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    except Exception as ex:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ start_command —Å —Ç–µ–∫—Å—Ç–æ–º : {ex} ")
#region --- –ú–µ—Ç–æ–¥—ã –¥–∏–∞–ª–æ–≥–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def creat_markup_registration_menu():
    button_list = [
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="/cancel"),
        InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="/skip")
    ]
    reply_markup = InlineKeyboardMarkup(build_button_menu(button_list, n_cols=2))
    return reply_markup

async def button_handler_registration_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    print(f'–ë—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {query.data}')
    if query.data == "/cancel":
        await query.edit_message_text(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    if query.data == "/skip":
        current_state = context.user_data[NAME_CONST_CURRENT_STATE_DIALOG]
        handler = make_skip_handler(current_state)
        if current_state + 1 < 3:
            current_state += 1
        else:
            current_state = ConversationHandler.END
        context.user_data[NAME_CONST_CURRENT_STATE_DIALOG]  = current_state  
        return await handler(update, context)
    
    
async def ask_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text
        context.user_data[Name_BOT_data].gender = text
        db.add_or_update_user(context.user_data[Name_BOT_data])
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞",
                                        reply_markup=ReplyKeyboardRemove())
        await help_command(update=update, context=context)
        context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ConversationHandler.END
        return ConversationHandler.END
    except Exception as ex:
        print(f'–ú–µ—Ç–æ–¥ ask_gender, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º : {ex}')
        return ConversationHandler.END

async def ask_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text
        if not text.isdigit():
            markup = creat_markup_registration_menu()
            await update.message.reply_text("B–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ\n –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç", reply_markup=markup)
            context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_GENDER
            return ASK_HEIGHT
        height = float(text)
        if height < 50 or height > 272:
            markup = creat_markup_registration_menu()
            await update.message.reply_text("–û–≥–æ, –Ω–æ –Ω–µ–±—ã–≤–∞–µ—Ç —Ç–∞–∫–∏—Ö –ª—é–¥–µ–π, –ª–∏–±–æ –±–µ–≥–æ–º –≤ –∫–Ω–∏–≥—É —Ä–µ–∫–æ—Ä–¥–æ–≤ –≥–∏–Ω–Ω–µ—Å–∞!!!\n –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç", reply_markup=markup)
            context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_GENDER
            return ASK_HEIGHT
        context.user_data[Name_BOT_data].height = height
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        markup_key = creat_markup_registration_menu()
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à —Ä–æ—Å—Ç {height} —Å–æ—Ö—Ä–∞–Ω—ë–Ω. ")
        await update.message.reply_text(
        (
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ \n" 
            "O—Ç–ø—Ä–∞–≤—å /cancel, –µ—Å–ª–∏ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è." 
        ),
        reply_markup=markup_key,
        )
        context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ConversationHandler.END
        return ASK_GENDER
    except Exception as ex:
        print(f'–ú–µ—Ç–æ–¥ ask_height, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º : {ex}')
        return ConversationHandler.END
"""
–ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞
"""
async def ask_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text
        if not text.isdigit():
            markup = creat_markup_registration_menu()
            await update.message.reply_text("B–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ\n –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å", reply_markup=markup)
            context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_HEIGHT
            return ASK_WEIGHT
        weight = float(text)
        if weight < 2 or weight > 635:
            markup = creat_markup_registration_menu()
            await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è –≤–∞—à–∏ –≤–µ—Å—ã —Å–ª–æ–º–∞–Ω—ã\n –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å", reply_markup=markup)
            context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_HEIGHT
            return ASK_WEIGHT
        context.user_data[Name_BOT_data].weight = weight
        markup_key = creat_markup_registration_menu()
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–µ—Å {weight} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        await update.message.reply_text(
            (
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ \n" 
                "O—Ç–ø—Ä–∞–≤—å /skip, –µ—Å–ª–∏ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è." 
            ),
            reply_markup=markup_key,
        )
        context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_GENDER
        return ASK_HEIGHT
    except Exception as ex:
        print(f'–ú–µ—Ç–æ–¥ ask_weight, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º : {ex}')
        return ConversationHandler.END

"""
–ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞
"""
async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text
        if not text.isdigit():
            markup = creat_markup_registration_menu()
            await update.message.reply_text("–°—Ç–æ–ª—å–∫–æ –Ω–µ –∂–∏–≤—É—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ", reply_markup=markup)
            context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_WEIGHT
            return ASK_AGE
        age = int(text)
        if age < 0 or age > 100:
            markup = creat_markup_registration_menu()
            await update.message.reply_text("–ù–µ –±—Ä–∞—Ç, —Å—Ç–æ–ª—å–∫–æ –Ω–µ –∂–∏–≤—É—Ç. –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 1 –¥–æ 99.", reply_markup=markup)
            context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_WEIGHT
            return ASK_AGE
        context.user_data[Name_BOT_data].age = age
        markup_key = creat_markup_registration_menu()
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç {age} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n")
        # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã `ReplyKeyboardRemove`
        await update.message.reply_text(
            (
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ \n" 
                "O—Ç–ø—Ä–∞–≤—å /skip, –µ—Å–ª–∏ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è." 
            ),
            reply_markup=markup_key
        )
        context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_HEIGHT
        return ASK_WEIGHT
    except Exception as ex:
        print(f'–ú–µ—Ç–æ–¥ ask_age, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º : {ex}')
        return ConversationHandler.END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END
async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(text="–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
    # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã `ReplyKeyboardRemove`
    markup_key = creat_markup_registration_menu()
    await update.message.reply_text(
        'O—Ç–ø—Ä–∞–≤—å /skip, –µ—Å–ª–∏ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è.',
        reply_markup=markup_key,
    )
    context.user_data[NAME_CONST_CURRENT_STATE_DIALOG] = ASK_AGE
    return ASK_AGE

def make_skip_handler(next_step):
    async def skip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        text_end = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞. \n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /my"
        text_next = f"–õ–∞–¥–Ω–æ, –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ {get_state_text(next_step)}"
        markup = creat_markup_registration_menu()

        if get_state_text(next_step) == ASK_CONST_STRING_END:
            if update.message:
                await update.message.reply_text(text_end)
            elif update.callback_query:
                await update.callback_query.message.reply_text(text_end)
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=text_end)
        else:
            if update.message:
                await update.message.reply_text(text_next, reply_markup=markup)
            elif update.callback_query:
                await update.callback_query.message.reply_text(text_next, reply_markup=markup)
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=text_next, reply_markup=markup)
        return next_step
    return skip


#endregion
async def my_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_profile = context.user_data[Name_BOT_data]  = UserProfile.load_foarm(update.effective_user.id)
        if user_profile is None:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f'–í–∞—Å {update.effective_user.username} –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            return
        answer = (
            "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞!\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"ID: {user_profile.id}\n"
            f"User Name: {context.bot_data[Name_BOT_data].username}\n"
            f"First Name: {user_profile.first_name}\n"
            f"Last Name: {user_profile.last_name}\n"
            f"Full Name: {user_profile.full_name}\n"
            f"premium : {user_profile.get_is_premium()}\n"
            f"–†–æ—Å—Ç : {user_profile.height or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n"
            f"–í–µ—Å : {user_profile.weight or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n"
            f"–ò–ú–¢ : {user_profile.calc_iwm()} ({user_profile.get_stadia_iwm() or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"})\n"
            f"–ü–æ–ª : {user_profile.gender or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç : {user_profile.age or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n"
            f"–ø–æ—á—Ç–∞ : {user_profile.email or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n"
            f"–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ : {user_profile.register_date or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n"
        )
        await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)
    except ValueError as ex:
        print(ex)
    except FileNotFoundError as ex:
        print(ex)
    except RuntimeError as ex:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞—Å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ({ex})")
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        answer = (
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ /reg.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ /my. \n"
        )
        await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)
        
async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
    await help_command(update=update, context=context)