import db.sqliteDb as db
from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,)
from telegram.ext import (
    ContextTypes
)
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    db.add_or_update_user(user)
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ–∏—Ç–Ω–µ—Å–∞.\n"
        "–Ø –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n"
        "- –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –ø–∏—Ç–∞–Ω–∏—é\n"
        "- –ü–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏\n"
        "- –ú–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏–ª–∏ –≤–æ–¥–µ\n"
        "- –î–∞–º —Å–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    try:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    except Exception:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")

async def my_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = db.get_user_data(user_id=update.effective_chat.id)
        if user is None:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        answer = (
            "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞!\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"ID: {user[0]}\n"
            f"User Name: {user[1]}\n"
            f"First Name: {user[2]}\n"
            f"Last Name: {user[3]}\n"
            f"Full Name: {user[4]}\n"
        )
        await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)
    except Exception as ex:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞—Å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ({ex})")

async def echo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

async def caps_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text_caps = " ".join(context.args).upper()
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text_caps)

async def inline_caps(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        from uuid import uuid4

        query = update.inline_query.query
        if not query:
            return
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="Caps",
                input_message_content=InputTextMessageContent(message_text=query.upper()),
            )
        ]
        await context.bot.answer_inline_query(update.inline_query.id, results)
    
async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        answer = (
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.\n"
            "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–∞–ø—Å–æ–º /caps.\n"
        )
        await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)
        
async def handle_invalid_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.callback_query.answer()
        await update.effective_message.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ üòï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."
        )
        
async def list_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        # –ü—Ä–∏–º–µ—Ä: –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ callback_data ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä "3,[1,2]"
        try:
            # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞: –≤ –≤–∞—à–µ–º –∫–æ–¥–µ —ç—Ç–æ –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç callback_data
            data_str = query.data  # —Å—Ç—Ä–æ–∫–∞
            # –ï—Å–ª–∏ callback_data ‚Äî —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω—É–∂–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ json.loads)
            # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            number = int(data_str)  # –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            number_list = []  # –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        except Exception:
            number = None
            number_list = []

        if number is not None:
            number_list.append(number)
            await query.edit_message_text(
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {number_list}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç:",
                reply_markup=self.build_keyboard(),
            )
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ callback_data —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

async def unknown_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")            
    
    