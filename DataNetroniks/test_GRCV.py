import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier

# Загружаем набор данных
iris = load_iris()
X = iris.data
y = iris.target

# Разделяем данные на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Определяем модель
model = RandomForestClassifier()

# Определяем параметры для Grid Search
param_grid = {
    'n_estimators': [10, 50, 100],  # Количество деревьев ,то число деревьев, которые будут созданы в модели случайного леса.
    # Каждый отдельный "дерево" в случайном лесу обучается на случайной подвыборке данных 
    # и выбирает случайные подмножества признаков (фич). 
    # Затем все деревья объединяются для принятия окончательного решения
    # Увеличение числа деревьев обычно повышает точность модели, 
    # так как каждое дерево может захватывать разные аспекты данных. 
    # Однако слишком большое количество деревьев может привести к увеличению времени обучения и предсказания.


    'max_depth': [None, 5, 10],      # Максимальная глубина дерева Это максимальная глубина каждого дерева в случайном лесу. 
    # Глубина дерева — это количество уровней от корня до самого глубокого листа.
    # Если глубина дерева не ограничена, оно может продолжаться делиться на подгруппы, пока не останется только один пример 
    # или пока не будет достигнут критерий остановки 
    # Ограничение глубины помогает избежать переобучения ( overfitting), когда модель слишком хорошо подстраивается 
    # под обучающие данные и плохо обобщает на новых данных. Если дерево слишком глубокое, оно может захватить шум 
    # в данны, что ухудшит его производительность на тестовых данных 
}

# Настраиваем Grid Search CV
grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5)

# Обучаем модель с помощью Grid Search
grid_search.fit(X_train, y_train)

# Выводим лучшие параметры и точность
print("Лучшие параметры:", grid_search.best_params_)
print("Лучшая точность на тестовых данных:", grid_search.score(X_test, y_test))
